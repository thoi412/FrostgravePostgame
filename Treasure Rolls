#Python code

import random
from time import sleep

# Define Item class


class Item:
    def __init__(self, name, purchase_price, sale_price, item_type, description):
        self.name = name
        self.purchase_price = purchase_price
        self.sale_price = sale_price
        self.item_type = item_type
        self.description = description


# Define Lesser Potions

pot_of_heal = Item('Potion of Healing', 75, 50, 'Potion', '')
pot_of_str = Item('Potion of Strength', 100, 40, 'Potion', '')
pot_of_tuf = Item('Potion of Toughness', 50, 30, 'Potion', '')
elix_of_speed = Item('Elixir of Speed', 50, 30, 'Potion', '')
pot_of_invis = Item('Potion of Invisibility', 100, 50, 'Potion', '')
explo_cock = Item('Explosive Cocktail', 100, 30, 'Potion', '')
pot_of_tele = Item('Potion of Teleportation', 500, 100, 'Potion', '')
pot_of_elem_absorb = Item('Potion of Elemental Absorption', 200, 80, 'Potion', '')
cord_of_clears = Item('Cordial of Clearsight', 200, 80, 'Potion', '')
poison = Item('Poison', 100, 30, 'Potion', '')
phil_of_fury = Item('Philtre of Fury', 300, 120, 'Potion', '')
pot_of_FeMind = Item('Potion of Iron Mind', 50, 30, 'Potion', '')
bot_of_bur = Item('Bottle of Burrowing', 200, 80, 'Potion', '')
phil_of_FairyD = Item('Philtre of Fairy Dust', 50, 30, 'Potion', '')
construct_oil = Item('Construct Oil', 100, 50, 'Potion', '')
pot_of_fire_brth = Item('Potion of Fire Breath', 200, 80, 'Potion', '')
pot_of_pres = Item('Potion of Preservation', 500, 200, 'Potion', '')
elix_of_cham = Item('Elixir of the Chameleon', 400, 140, 'Potion', '')


# Define Greater Potions

cord_of_emp = Item('Cordial of Empowerment', 500, 200, 'Potion', '')
shrink_pot = Item('Shrinking Potion', 500, 200, 'Potion', '')
pot_of_rest = Item('Potion of Restoration', 2000, 300, 'Potion', '')
bot_of_drms_nitmrs = Item('Bottle of Dreams and Nightmares', 2000, 300, 'Potion', '')
shat_drat = Item('Shatterstar Draught', 1500, 200, 'Potion', '')
bot_of_dark = Item('Bottle of Darkness', 1500, 300, 'Potion', '')
eth_vac = Item('Ethereal Vacuum', 2000, 200, 'Potion', '')
pot_of_invul = Item('Potion of Invulnerability', 0, 400, 'Potion', '')
bot_of_null = Item('Bottle of Null', 0, 200, 'Potion', '')
elix_of_life = Item('Elixir of Life', 0, 1000, 'Potion', '')

lesser_potions = [
    pot_of_heal, pot_of_str, pot_of_tuf, elix_of_speed, pot_of_invis, explo_cock,
    pot_of_tele, pot_of_tele, pot_of_elem_absorb, cord_of_clears, poison, phil_of_fury,
    pot_of_FeMind, bot_of_bur, phil_of_FairyD, construct_oil, pot_of_fire_brth,
    pot_of_pres, elix_of_cham]

greater_potions = [
    cord_of_emp, shrink_pot, pot_of_rest, bot_of_drms_nitmrs, shat_drat, bot_of_dark,
    eth_vac, pot_of_invul, bot_of_null, elix_of_life]


def roll_20():
    return random.randint(1, 20)


def table_roll_20():
    return random.randint(0, 19)


def soldierSurvival():
    roll = table_roll_20()
    return soldier_survival[roll]


def spellcasterSurvival():
    roll = table_roll_20()
    return spellcaster_survival[roll]


def spellcasterInjuries():
    roll = table_roll_20()
    return spellcaster_injuries[roll]


def magic_table_roll():
    return random.randint(0, 3)


def greaterPotionTable():
    roll = table_roll_20()
    return greater_potion_table[roll].name


def lesserPotionTable():
    roll = table_roll_20()
    return lesser_potion_table[roll].name


def spellTable():
    roll1 = magic_table_roll()
    roll2 = table_roll_20()
    return spell_table[roll1][roll2]


def magicWeaponArmourTable():
    roll = table_roll_20()
    return magic_weapon_armour_table[roll]


def magicItemTable():
    roll = table_roll_20()
    return magic_item_table[roll]


def treasureTable():
    roll = table_roll_20()
    return treasure_table[roll]


# The Tables

soldier_survival = [
    "has died.",
    "has died.",
    "has died.",
    "has died.",
    "is badly wounded.",
    "is badly wounded.",
    "is badly wounded.",
    "is badly wounded.",
    "will make a full recovery.",
    "will make a full recovery.",
    "will make a full recovery.",
    "will make a full recovery.",
    "will make a full recovery.",
    "will make a full recovery.",
    "will make a full recovery.",
    "will make a full recovery.",
    "will make a full recovery.",
    "will make a full recovery.",
    "will make a full recovery.",
    "will make a full recovery."
]

spellcaster_injuries = [
    "lost toes",
    "lost toes",
    "a smashed leg",
    "a smashed leg",
    "a smashed leg",
    "a smashed leg",
    "a crushed arm",
    "a crushed arm",
    "a crushed arm",
    "a crushed arm",
    "lost fingers",
    "lost fingers",
    "never being quite as strong",
    "never being quite as strong",
    "psychological scars",
    "psychological scars",
    "a niggling injury",
    "a niggling injury",
    "a smashed jaw",
    "a lost eye"
]

spellcaster_survival = [
    "has died.",
    "has died.",
    "will carry a permanent injury of " + spellcasterInjuries() + ".",
    "will carry a permanent injury of " + spellcasterInjuries() + ".",
    "is badly wounded.",
    "is badly wounded.",
    "had a close call.",
    "had a close call.",
    "will make a full recovery.",
    "will make a full recovery.",
    "will make a full recovery.",
    "will make a full recovery.",
    "will make a full recovery.",
    "will make a full recovery.",
    "will make a full recovery.",
    "will make a full recovery.",
    "will make a full recovery.",
    "will make a full recovery.",
    "will make a full recovery.",
    "will make a full recovery."
]

# Greater Potion Table
greater_potion_table = [
    greater_potions[0],
    greater_potions[0],
    greater_potions[1],
    greater_potions[1],
    greater_potions[2],
    greater_potions[2],
    greater_potions[3],
    greater_potions[3],
    greater_potions[4],
    greater_potions[4],
    greater_potions[5],
    greater_potions[5],
    greater_potions[6],
    greater_potions[6],
    greater_potions[7],
    greater_potions[7],
    greater_potions[8],
    greater_potions[8],
    greater_potions[9],
    greater_potions[9]
]
"""
    'Cordial of Empowerment',
    'Cordial of Empowerment',
    'Shrinking Potion',
    'Shrinking Potion',
    'Potion of Restoration',
    'Potion of Restoration',
    'Bottle of Dreams and Nightmares',
    'Bottle of Dreams and Nightmares',
    'Shatterstar Draught',
    'Shatterstar Draught',
    'Bottle of Darkness',
    'Bottle of Darkness',
    'Ethereal Vacuum',
    'Ethereal Vacuum',
    'Potion of Invulnerability',
    'Potion of Invulnerability',
    'Bottle of Null',
    'Bottle of Null',
    'Elixir of Life',
    'Elixir of Life'
"""


# Lesser Potion Table
lesser_potion_table = [
    lesser_potions[0],
    lesser_potions[1],
    lesser_potions[2],
    lesser_potions[3],
    lesser_potions[4],
    lesser_potions[5],
    lesser_potions[6],
    lesser_potions[7],
    lesser_potions[8],
    lesser_potions[9],
    lesser_potions[10],
    lesser_potions[11],
    lesser_potions[12],
    lesser_potions[13],
    lesser_potions[14],
    lesser_potions[15],
    lesser_potions[16],
    lesser_potions[17],
    greaterPotionTable(),
    greaterPotionTable()
    ]
"""
'Potion of Healing',
    'Potion of Strength',
    'Potion of Toughness',
    'Elixir of Speed',
    'Potion of Invisibility',
    'Explosive Cocktail',
    'Potion of Teleportation',
    'Potion of Elemental Absorption',
    'Cordial of Clearsight',
    'Poison',
    'Philtre of Fury',
    'Potion of Iron Mind',
    'Potion of Burrowing',
    'Philtre of Fairy Dust',
    'Construct Oil',
    'Potion of Fire Breath',
    'Potion of Preservation',
    'Elixir of the Chameleon',
"""


# Spell Table
spell_table = [
    [
        'Animate Skull',
        'Curse',
        'Fleet Feet',
        'Leap',
        'Wall',
        'Push',
        'Teleport',
        'Strength',
        'Awareness',
        'Shield',
        'Bone Dart',
        'Mud',
        'Decay',
        'Plague of Insects',
        'Elemental Bolt',
        'Furious Quill',
        'Blink',
        'Enchant Weapon',
        'Combat Awareness',
        'Circle of Protection'
    ], [
        'Bones of the Earth',
        'Poison Dart',
        'Slow',
        'Imp',
        'Call Storm',
        'Draining Word',
        'Invisibility',
        'Telekinesis',
        'True Sight',
        'Banish',
        'Spell Eater',
        'Fog',
        'Time Store',
        'Planar Tear',
        'Elemental Ball',
        'Absorb Knowledge',
        'Fool\'s Gold',
        'Grenade',
        'Wizard Eye',
        'Heal'
    ], [
        'Strike Dead',
        'Animal Companion',
        'Crumble',
        'Plane Walk',
        'Scatter Shot',
        'Explosive Rune',
        'Beauty',
        'Enchant Armour',
        'Mind Lock',
        'Blinding Light',
        'Steal Health',
        'Control Animal',
        'Petrify',
        'Possess',
        'Elemental Hammer',
        'Power Word',
        'Glow',
        'Embed Enchantment',
        'Suggestion',
        'Dispel'
    ], [
        'Control Undead',
        'Familiar',
        'Fast Act',
        'Control Demon',
        'Destructive Sphere',
        'Write Scroll',
        'Transpose',
        'Control Construct',
        'Mind Control',
        'Miraculous Cure',
        'Raise Zombie',
        'Brew Potion',
        'Time Walk',
        'Summon Demon',
        'Elemental Shield',
        'Bridge',
        'Illusionary Soldier',
        'Animate Construct',
        'Reveal Secret',
        'Destroy Undead'
    ]
]

# Magic Weapon and Armour Table

magic_weapon_armour_table = [
    'Hand Weapon (+1 damage modifier)',
    'Hand Weapon (+1 Fight)',
    'Hand Weapon (+2 Will)',
    'Two-Handed Weapon (+1 damage modifier)',
    'Two-Handed Weapon (+1 Fight)',
    'Two-Handed Weapon (+2 Will)',
    'Bow (+1 damage modifier)',
    'Bow (+1 Shoot)',
    'Crossbow (+1 damage modifier)',
    'Crossbow (+1 Shoot)',
    'Dagger (+1 Fight)',
    'Dagger (+1 damage modifier)',
    'Dagger (+2 damage modifier)',
    'Light Armour (+1 Armour)',
    'Heavy Armour (Elemental Absorption)',
    'Ring of Protection (+1 Armour)',
    'Cloak of Protection (+1 Armour)',
    'Cloak of Night (Elemental Absorption)',
    'Staff (+1 Fight)',
    'Shield (+1 Armour)'
]

# Magic Item Table

magic_item_table = [
    'Staff of Power (1)',
    'Staff of Power (2)',
    'Ring of Transference',
    'Ring of Power (1)',
    'Orb of Power (6)',
    'Staff of Casting',
    'Boots of Speed',
    'Ring of Slow Fall',
    'Ring of Will',
    'Ring of Teleportation',
    'Gloves of Strength',
    'Robes of Arrow Turning',
    'Amulet of Resistance',
    'Construct Hammer',
    'Gloves of Casting',
    'Wand of Light',
    'Horn of Destruction',
    'Fate Stone',
    'Wand of Power (1)',
    'Staff of Power (3)'
]

# Treasure Table
treasure_table = [
    "50 gold crowns",
    str(roll_20() * 10) + " gold crowns",
    str(roll_20() * 20) + " gold crowns",
    "20 gold crowns and " + lesserPotionTable() + ", " + lesserPotionTable() + ", and " + lesserPotionTable() + " potions",
    "40 gold crowns and " + lesserPotionTable() + " and " + lesserPotionTable() + " potions",
    "20 gold crowns and a " + spellTable() + " scroll",
    "40 gold crowns and a " + spellTable() + " scroll and a " + spellTable() + " scroll",
    "The magic weapon / armor of " + magicWeaponArmourTable(),
    "20 gold crowns and the magic weapon / armor of " + magicWeaponArmourTable(),
    "40 gold crowns and the magic weapon / armor of " + magicWeaponArmourTable(),
    "The magic item of " + magicItemTable(),
    "20 gold crowns and the magic item of " + magicItemTable(),
    "40 gold crowns and the magic item of " + magicItemTable(),
    "A Grimoire of " + spellTable(),
    "20 gold crowns and a Grimoire of " + spellTable(),
    "40 gold crowns and a Grimoire of " + spellTable(),
    "60 gold crowns and a Grimoire of " + spellTable(),
    "80 gold crowns and a Grimoire of " + spellTable(),
    "100 gold crowns and a Grimoire of " + spellTable(),
    "120 gold crowns and a Grimoire of " + spellTable()
]


def main():
    try:
        injured_soldiers = int(input("How many of your soldiers were defeated? "))
        for n in range(injured_soldiers):
            print("Soldier " + str(n + 1) + " " + soldierSurvival())
            sleep(0.5)
    except:
        print("Try putting in a numeral like 3 next time")

    try:
        apprentice_injury = input("Was your apprentice injured? (y/n)")
        if apprentice_injury == 'y':
            print("Your apprentice " + spellcasterSurvival())
        elif apprentice_injury == 'n':
            print("Well isn't that nice.")
    except:
        print("Reply with a lowercase 'y' or 'n'")

    try:
        wizard_injury = input("Was your apprentice injured? (y/n)")
        if wizard_injury == 'y':
            print("Your wizard " + spellcasterSurvival())
        elif wizard_injury == 'n':
            print("Well isn't that nice.")
    except:
        print("Reply with a lowercase 'y' or 'n'")

    try:
        treasures = int(input("How many treasures did you recover?"))
        for _ in range(treasures):
            print(treasureTable())
            sleep(0.5)
    except:
        print("Try again, but put in a number like 3 next time.")


if __name__ == "__main__":
    main()
